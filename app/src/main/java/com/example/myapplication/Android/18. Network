

Network
-> 통신

Database <----> Server <----> Client(app, web, ...)
    글                           A
    댓글                          B


Local Database의 한계
- 동기화가 어렵다
- 상호작용이 불가능하다


서버와 통신하는 방법
- 해당 url로 요청한다
- 인증정보를 보낸다
- JSON 형식을 사용해서 data를 보낸다
- JavaScript Object Notation -> Javascript에서 객체를 만들 때 사용하는 표현식

JSON 형식
- [] -> List
- {} -> 객체
    -> "" -> 문자열
    -> ""없으면 -> 숫자


Json Response
[
    {
        "id": 1,
        "name": "홍길동",
        "age": 20,
        "intro": "나는 홍길동이다!"
    },
    {
        "id": 2,
        "name": "길동",
        "age": 10,
        "intro": "나는 길동이다!"
    }
]

Json Parsing
-> Json을 kotlin이나 java가 이해할 수 있게 변형하는 과정

Serializable (직렬화)
->
---------------------------->
    id, name, age, intro


kotlin이나 java가 이해할 수 있는 틀

class Person(
    var id: Int? = null
    var name: String? = null
    var age: Int? = null
    var intro: String? = null
)

Person(1,"홍길동",20,"안녕하세요")

Request Type                    Status Code
- GET       -> 정보 요청        -> 200 OK
- POST      -> 정보 추가 요정    -> 201 Created
- DELETE    -> 정보 삭제 요청
- PUT       -> 정보 수정 요청

Status Code
- 200번대 -> 처리가 잘 됐다